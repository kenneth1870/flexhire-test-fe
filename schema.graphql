"""
Directs the executor to deliver this part of the result after the initial result.
"""
directive @defer(
  """
  If false, this field _won't_ be deferred.
  """
  if: Boolean = true

  """
  A unique label to identify the deferred payload.
  """
  label: String
) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

type Answer implements Node {
  id: ID!
  question: Question
  questionId: Int!
  textualAnswer: String
  type: String!
  userId: Int!
  video: Video
}

"""
API keys used to access Flexhire programmatically
"""
type ApiKey implements Node {
  createdAt: DateTime
  id: ID!

  """
  slice of the actual key, to be used to identify it
  """
  keySlice: String
  lastUsedAt: DateTime
  user: User
}

type ApplicationsResults {
  applications(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ContractConnection
  filteredOutCount: Int!
  filteredOutIds: [Int!]!
  highlightCount: Int!
  highlightCountMyTeam: Int!
  totalCount: Int!
  totalCountMyTeam: Int!
}

type BillingPlan implements Node {
  allowAtsJobIntegrations: Boolean
  allowBackgroundChecks: Boolean
  allowCareerPageIntegration: Boolean
  allowFlexhireRecruiters: Boolean
  allowMultipleManagers: Boolean
  allowPaymentsDisabledContracts: Boolean
  contractsHireMinMarginUsd: Float
  contractsHireSourcedByClientMargin: Float
  contractsHireSourcedByFlexhireMargin: Float
  contractsInvitationMargin: Float
  customerSuccessRep: Boolean
  dailyFlexhireRecruiterPerJobFeeUsd: Float
  dailyInviteContractFeeUsd: Float
  dailyJobFeeUsd: Float
  dailyManagerFeeUsd: Float
  dailyPaymentsDisabledContractFeeUsd: Float
  dailyPlanFeeUsd: Float
  dailySourcedByClientHireContractFeeUsd: Float
  dailySourcedByFlexhireHireContractFeeUsd: Float
  freePaymentsDisabledContractsLimit: Int
  highlighted: Boolean
  id: ID!
  maxCandidates: Int
  minimumManagers: Int
  name: String
  paymentMethodTypes: [String!]
  rawId: Int
}

type Candidate implements Node {
  contract: Contract
  freelancer: User!
  id: ID!
  invitedToJob: Boolean
  job: Job
  jobIncompatibilityReasons: [String!]
}

"""
The connection type for Candidate.
"""
type CandidateConnection {
  """
  A list of edges.
  """
  edges: [CandidateEdge]

  """
  A list of nodes.
  """
  nodes: [Candidate]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int
}

"""
An edge in a connection.
"""
type CandidateEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Candidate
}

type CandidateToNotify implements Node {
  id: ID!
  rawId: Int
  status: String
}

input CandidateToNotifyAttributes {
  rawId: Int
}

input CandidatesFilters {
  adminMode: Boolean
  availableOnly: Boolean
  bookmarked: Boolean
  bookmarkedByUserId: Int
  canWorkInTheUs: Boolean
  contractStatus: String
  countries: [String!]
  distanceMiles: Float
  distanceOriginLatitude: Float
  distanceOriginLongitude: Float
  excludeHidden: Boolean
  experience: Int
  freelancerSubtypes: [CandidatesFiltersFreelancerSubtype!]
  hasAnswers: Boolean
  hasProjectSubmission: Boolean
  hasVideoIntroduction: Boolean
  jobsIds: [Int!]
  locationType: String
  managedTeamSizes: [String!]
  managedTeams: Boolean
  maxAnnualCompensation: Int
  maxClientRate: Float
  maxUniversityRank: Int
  missingAnswers: Boolean
  missingProjectSubmission: Boolean
  missingVideoIntroduction: Boolean
  name: String
  positionTypes: String
  rating: String
  showNotNotified: Boolean
  showNotified: Boolean
  skills: [SkillFilter!]
  timezone: Int
  timezoneRange: Int
  university: String
  verifiedOnly: Boolean
}

input CandidatesFiltersFreelancerSubtype {
  groupIndex: Int
  id: Int!
  name: String
}

type ChatMessage implements Node {
  author: User!
  contract: Contract
  id: ID!
  label: String
  message: String!
  status: String!
}

"""
The connection type for ChatMessage.
"""
type ChatMessageConnection {
  """
  A list of edges.
  """
  edges: [ChatMessageEdge]

  """
  A list of nodes.
  """
  nodes: [ChatMessage]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int
}

"""
An edge in a connection.
"""
type ChatMessageEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ChatMessage
}

"""
Autogenerated return type of ChatMessageReceived
"""
type ChatMessageReceivedPayload {
  chatMessage: ChatMessage!
}

type ChatThread implements Node {
  avatarUrl: String
  chatMessages(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    unread: Boolean
  ): ChatMessageConnection
  createdAt: DateTime
  defaultTitle: String
  enableMeetingRoom: Boolean
  id: ID!
  lastActivityAt: DateTime
  meetingRoom: String
  otherUser: User
  threadType: String!
  title: String
  users: [User!]!
}

"""
The connection type for ChatThread.
"""
type ChatThreadConnection {
  """
  A list of edges.
  """
  edges: [ChatThreadEdge]

  """
  A list of nodes.
  """
  nodes: [ChatThread]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int
}

"""
An edge in a connection.
"""
type ChatThreadEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ChatThread
}

type Configuration {
  enablePwaInstall: Boolean!
  jobsMinAnnualCompensationUsd: Money
  jobsMinClientRateUsd: Money
  payoutMethodTypes: [String!]
  stripeConnectSupportedCountries: [String!]
  supportedCurrencies: [String!]
}

type Contract implements Node {
  allowTextualAnswers: Boolean
  annualCompensation: Money
  annualCompensationCents: Int
  answers: [Video!]
  applicantSource: String
  availabilityType: [String!]
  backgroundCheckStatus: String
  bookmarked: Boolean
  calendlyUrl: String
  checkrCandidateId: String
  city: String
  client: User
  clientAgreesTerms: Boolean
  clientRate: Money
  clientRejectionComments: String
  clientRejectionMessage: String
  clientRejectionReason: String
  contractFeedbacks: [ContractFeedback!]
  contractIntroductionSentAt: DateTime
  contractRequests: [ContractRequest!]
  country: String
  createdAt: DateTime!
  currency: String!
  dailyFee: Money
  defaultDistance: Float
  deletable: Boolean
  description: String
  disableMinUsdMarginLimit: Boolean
  discountId: Int
  enableTimesheets: Boolean
  endDate: Date
  estimatedNextSalaryPayoutDate: DateTime
  firmRole: String
  freelancer: User
  freelancerAgreesTerms: Boolean
  freelancerContactEmail: String
  freelancerEmail: String
  freelancerFeedback: String
  freelancerFirstName: String
  freelancerLastName: String
  freelancerMessage: String
  freelancerPhone: String
  freelancerRate: Money
  freelancerTimezoneName: String
  fullAddress: String
  hidden: Boolean
  hiringManager: User
  id: ID!
  inheritor: User
  interviewAcceptedAt: DateTime
  interviewDate: DateTime
  interviewDate1: DateTime
  interviewDate2: DateTime
  interviewDate3: DateTime
  interviewDate4: DateTime
  interviewNote: String
  interviewSchedulingMethod: String
  interviewTimezone: String
  interviewerEmail: String
  interviewerName: String
  interviewerRole: String
  invitationType: String
  invitedBy: User
  invitedToApplyAt: DateTime
  job: Job
  jobApplicationNotifiedToAdminsAt: DateTime
  jobApplicationReminderSentAt: DateTime
  jobApplicationSentAt: DateTime
  jobApplicationSentByFreelancerAt: DateTime
  jobOpportunitySentAt: DateTime
  jobTimezone: String
  lastInteractionAt: DateTime
  latitude: Float
  locationType: String
  longitude: Float
  managedOffPlatform: Boolean
  margin: Float
  minClientRate: Float
  minDateToInvoiceNextSalary: DateTime
  minMarginUsd: Float
  negativeFeedbackCount: Int
  nextSalaryInvoiceDate: DateTime
  notifyChanges: Boolean
  offerNote: String
  paymentMode: String
  paymentsEnabled: Boolean
  positionTypes: [String!]
  positiveFeedbackCount: Int
  postInterviewRemindersSentAt: DateTime
  previousStatus: String
  profileJobIncompatibilityReasons: [String!]
  projectLength: String
  projectLengthInMonths: Int
  projectSubmission: ProjectSubmission
  purchaseOrderNumber: String
  rateMode: String
  rawId: Int
  ref: String
  referer: User
  refererUrl: String
  referralOpportunitySentAt: DateTime
  region: String
  requestBackground: Boolean
  requestsStatus: ContractRequestsStatus
  requireTimesheetApprovalForPayments: Boolean
  signableDocuments: [SignableDocument!]
  sourcedByClient: Boolean
  startDate: Date
  status: ContractStatus!
  stripePlanId: String
  stripeProductId: String
  stripeSubscriptionId: String
  tags: [Tag!]
  textualAnswers: [Answer!]
  token: String
  updatedAt: DateTime!
}

"""
The connection type for Contract.
"""
type ContractConnection {
  """
  A list of edges.
  """
  edges: [ContractEdge]

  """
  A list of nodes.
  """
  nodes: [Contract]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int
}

"""
An edge in a connection.
"""
type ContractEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Contract
}

type ContractFeedback implements Node {
  contract: Contract
  description: String
  id: ID!
  ratingPositive: Boolean!
  status: String
  updatedAt: DateTime
  user: User
}

type ContractPreview {
  clientRate: Money
  currency: String
  dailyFee: Money
  discountId: Int
  freelancerFirstName: String
  freelancerRate: Money
  invitationType: String
  margin: Float
  minClientRate: Float
  minMarginUsd: Float
  paymentsEnabled: Boolean
  rateMode: String
}

input ContractPreviewAttributes {
  annualCompensation: Float
  availabilityType: [String!]
  clientId: ID
  clientRate: Float
  contractId: ID
  currency: String
  discountCode: String
  freelancerEmail: String
  freelancerId: ID
  freelancerRate: Float
  jobId: ID
  rateMode: String
}

type ContractRequest implements Node {
  allowTextualAnswers: Boolean
  id: ID!
  project: Project
  projectSubmission: ProjectSubmission
  question: Question
  requestType: String
  status: String
}

enum ContractRequestsStatus {
  """
  all requests have been completed
  """
  completed

  """
  requests have been made
  """
  pending

  """
  member has declined to complete requests
  """
  rejected

  """
  member has accepted the requests
  """
  started
}

enum ContractStatus {
  """
  contract is active and ongoing
  """
  active

  """
  expired contract has been deleted
  """
  deleted

  """
  active/paused contract has ended
  """
  expired

  """
  member has declined invitation to apply
  """
  freelancer_not_interested

  """
  interview request has been accepted by the member
  """
  interview_accepted

  """
  interview request has been rejected by the member
  """
  interview_rejected

  """
  member has started applying to the job
  """
  job_application_draft

  """
  member has been invited by the client to apply to the job
  """
  job_application_invited

  """
  member has sent the job application
  """
  job_application_sent

  """
  member has visited the job page
  """
  job_viewed

  """
  an offer has been made via hire pipeline or by inviting an off-platform user
  """
  offer_made

  """
  the member has turned down the offer
  """
  offer_rejected

  """
  contract is active and ongoing, but timesheet submission and payments are paused
  """
  paused

  """
  interview has been requested by the client
  """
  pending

  """
  potential referrer or applicant for the job
  """
  potential

  """
  during the hiring process, the member has been rejected by the client or an offer has been withdrawn
  """
  rejected
}

"""
Autogenerated return type of ContractUpdated
"""
type ContractUpdatedPayload {
  contract: Contract!
}

input ContractsFilters {
  clientId: ID
  excludeSelf: Boolean
  firmRole: String
  freelancerId: ID
  invitationType: String
  jobId: ID
  managersOnly: Boolean
  membersOnly: Boolean
  name: String
  skillsIds: [Int!]
  stage: String
  statuses: [String!]
  tagsIds: [Int!]
}

"""
Autogenerated input type of CreateApiKey
"""
input CreateApiKeyInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of CreateApiKey
"""
type CreateApiKeyPayload {
  apiKey: ApiKey

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]

  """
  this is the only way you can read the actual key! Make sure not to lose it
  """
  key: String
}

"""
Autogenerated input type of CreateCustomSkill
"""
input CreateCustomSkillInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  freelancerTypeIds: [Int!]!
  name: String!
}

"""
Autogenerated return type of CreateCustomSkill
"""
type CreateCustomSkillPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  skill: Skill
}

"""
Autogenerated input type of CreateSignableDocument
"""
input CreateSignableDocumentInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  title: String!
  url: String!
}

"""
Autogenerated return type of CreateSignableDocument
"""
type CreateSignableDocumentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: User
  errors: [Error!]
  signableDocument: SignableDocument
}

"""
Autogenerated input type of CreateWebhook
"""
input CreateWebhookInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  defaults to true. If false we will not send events to this webhook.
  """
  enabled: Boolean

  """
  HTTP POST requests with JSON bodies will be sent to this URL. The fields on
  the body are 'event_name', 'timestamp' (unix integer format) and 'records'
  (array of string IDs of related records)
  """
  url: String!
}

"""
Autogenerated return type of CreateWebhook
"""
type CreateWebhookPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]

  """
  the webhook just created
  """
  webhook: Webhook
}

"""
An ISO 8601-encoded date
"""
scalar Date

"""
An ISO 8601-encoded datetime
"""
scalar DateTime

"""
Autogenerated input type of DeleteApiKey
"""
input DeleteApiKeyInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

"""
Autogenerated return type of DeleteApiKey
"""
type DeleteApiKeyPayload {
  apiKey: ApiKey

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
}

"""
Autogenerated input type of DeleteContract
"""
input DeleteContractInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contractId: ID
}

"""
Autogenerated return type of DeleteContract
"""
type DeleteContractPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contract: Contract
  errors: [Error!]
}

"""
Autogenerated input type of DeleteJob
"""
input DeleteJobInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: Int
  slug: String
}

"""
Autogenerated return type of DeleteJob
"""
type DeleteJobPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  job: Job
}

"""
Autogenerated input type of DeleteUser
"""
input DeleteUserInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  omit this to delete your own account
  """
  userId: ID
}

"""
Autogenerated return type of DeleteUser
"""
type DeleteUserPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  user: User
}

"""
Autogenerated input type of DeleteWebhook
"""
input DeleteWebhookInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

"""
Autogenerated return type of DeleteWebhook
"""
type DeleteWebhookPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]

  """
  the webhook just deleted
  """
  webhook: Webhook
}

type Error {
  """
  might contain a redux action to be dispatched on the frontend
  """
  dispatch: JSON
  errorType: String!
  message: String!
}

"""
Autogenerated input type of ExpireContract
"""
input ExpireContractInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contractId: ID!

  """
  if this contract is for a manager on the firm, specify who will inherit the managed assets. Defaults to the current user
  """
  inheritorId: ID
}

"""
Autogenerated return type of ExpireContract
"""
type ExpireContractPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contract: Contract
  errors: [Error!]
}

type Firm implements Node {
  additionalInvoiceText: String
  allowDisplayApplicantSource: Boolean
  allowInvoiceAutoCharge: Boolean
  allowNoPaymentMethod: Boolean
  applications(filters: CandidatesFilters): ApplicationsResults
  backgroundTheme: String
  billingPlan: BillingPlan
  billingPlanStartedAt: DateTime
  candidates(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: CandidatesFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CandidateConnection
  contracts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: ContractsFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ContractConnection
  currency: String
  customerSuccessRep: User
  description: String
  emailsForInvoices: [String!]
  freelancerSubtypes: [FreelancerSubtype!]
  greenhouseConfigured: Boolean
  id: ID!
  instantBackgroundCheckPayment: Boolean
  internalRecruiter: User
  invoiceSchedule: String
  job(id: ID, slug: String): Job
  jobs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: JobsFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): JobConnection
  legacyBilling: Boolean
  logoUrl: String
  managerForNonPayrollFees: User
  member(jobSlug: String, profileSlugOrEmail: String): Member
  name: String
  paymentMethod: PaymentMethod
  paymentMethodTypes: [String!]
  payoutMode: String
  purchaseOrderNumberForNonPayrollFees: String
  rawId: Int
  screening(filters: CandidatesFilters): ApplicationsResults
  signableDocuments: [SignableDocument!]
  skills: [Skill!]
  slug: String
  tags: [Tag!]
  users: [User!]
  video: Video
  webhooks: [Webhook!]
  website: String
}

"""
The connection type for Firm.
"""
type FirmConnection {
  """
  A list of edges.
  """
  edges: [FirmEdge]

  """
  A list of nodes.
  """
  nodes: [Firm]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int
}

"""
An edge in a connection.
"""
type FirmEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Firm
}

enum FirmRole {
  """
  admin on the firm. Can view and edit all data
  """
  firm_admin

  """
  manager on the firm
  """
  firm_member
}

type FreelancerSubtype implements Node {
  freelancerType: FreelancerType
  id: ID!
  name: String
  rawId: Int
  slug: String
}

input FreelancerSubtypeAttributes {
  groupIndex: Int
  rawId: Int
}

type FreelancerType implements Node {
  freelancerSubtypes: [FreelancerSubtype!]
  id: ID!
  name: String
  rawId: Int
  slug: String
}

input FreelancerTypeAttributes {
  rawId: Int
}

"""
Represents untyped JSON
"""
scalar JSON

"""
position/job at a company
"""
type Job implements Node {
  activeJobIntegrationsNames: [String!]
  allowTextualAnswers: Boolean!
  applications(filters: CandidatesFilters): ApplicationsResults
  autoRenew: Boolean
  autoSendScreeningRequests: Boolean
  automaticallyNotifyCandidates: Boolean
  availabilityType: String
  candidates(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: CandidatesFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CandidateConnection
  candidatesToNotify: [CandidateToNotify!]

  """
  for non-remote jobs
  """
  city: String
  clientRate: Money
  clientRateCents: Int
  contracts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: ContractsFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ContractConnection

  """
  for non-remote jobs. ISO 3166-1 alpha-2 code, lowercase
  """
  country: String
  createdAt: DateTime
  defaultDistance: Float
  description: String
  descriptionExperience: String
  descriptionResponsibilities: String
  expiresAt: DateTime
  freelancerRate: Money
  freelancerRateCents: Int
  freelancerSubtypes: [FreelancerSubtype!]! @deprecated(reason: "use job.jobSubtypes")
  freelancerType: FreelancerType

  """
  for non-remote jobs
  """
  fullAddress: String
  hiringManager: User
  hiringManagerType: String
  id: ID!
  internalRecruiter: User

  """
  ISO 3166-1 alpha-2 codes, lowercase
  """
  jobCountries: [String!]!
  jobIntegrations: [JobIntegration!]
  jobSkills: [JobSkill!]!
  jobSocialIntegrations: [String!]
  jobSubtypes: [JobSubtype!]!
  jobTimezone: String
  locationLatitude: Float
  locationLongitude: Float
  locationType: String
  margin: Float
  markup: Float
  minClientRate: Money
  minClientRateCents: Int
  minFreelancerRate: Money
  minFreelancerRateCents: Int
  minMarginUsd: Float
  numberOfHires: Int
  positionTypes: [Position!]!
  project: Project
  projectLengthInMonths: Int
  questions: [Question!]
  rateMode: String
  rawId: Int
  recruiters: [User!]
  referralBounty: Money

  """
  for non-remote jobs
  """
  region: String
  requiredExperienceYears: Int
  screening(filters: CandidatesFilters): ApplicationsResults
  screeningRequestMessageTemplate: String
  slug: String
  status: String
  timezoneRange: Int
  timezoneValue: Int
  title: String!
  updatedAt: DateTime
  user: User
}

"""
The connection type for Job.
"""
type JobConnection {
  """
  A list of edges.
  """
  edges: [JobEdge]

  """
  A list of nodes.
  """
  nodes: [Job]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int
}

"""
An edge in a connection.
"""
type JobEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Job
}

type JobIntegration implements Node {
  active: Boolean
  enabledByUser: Boolean
  id: ID!
  job: Job
  jobIntegrationProvider: JobIntegrationProvider
  postingStatus: String
  publicationExpires: DateTime
  publishedJobUrl: String
}

type JobIntegrationProvider {
  activationFeeUsd: Float
  advertising: Boolean!
  dailyFeeUsd: Float
  name: String!
  supportedActions: [String!]!
}

type JobSkill implements Node {
  groupIndex: Int
  id: ID!
  name: String @deprecated(reason: "use skill.name instead")
  rawId: Int
  rawSkillId: Int @deprecated(reason: "use skill.rawId instead")
  required: Boolean
  requiredYears: Int
  skill: Skill
}

input JobSkillAttributes {
  groupIndex: Int
  name: String
  rawId: Int
  rawSkillId: Int
  required: Boolean
  requiredYears: Int
}

type JobSubtype implements Node {
  freelancerSubtype: FreelancerSubtype
  groupIndex: Int
  id: ID!
  rawId: Int
}

enum JobType {
  """
  for freelance jobs, usually paid hourly
  """
  freelance

  """
  for permanent jobs, usually paid with a fixed salary
  """
  permanent
}

input JobsFilters {
  status: String
  userId: ID
}

"""
Autogenerated input type of MakeOffer
"""
input MakeOfferInput {
  annualCompensation: Float
  availabilityType: [String!]!
  clientAgreesTerms: Boolean!
  clientId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  clientRate: Float
  currency: String
  discountCode: String
  enableTimesheets: Boolean
  endDate: Date
  freelancerId: ID!
  invoiceSchedule: String
  jobId: ID
  offerNote: String
  paymentMode: String!
  rateMode: String
  requireTimesheetApprovalForPayments: Boolean
  startDate: Date!
}

"""
Autogenerated return type of MakeOffer
"""
type MakeOfferPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contract: Contract
  errors: [Error!]
}

type Member {
  contract: Contract
  freelancer: User!
  job: Job
}

input MembersFilters {
  actionableOnly: Boolean
  contractStatus: String
  hiddenOnly: Boolean
  jobTitle: String
  name: String
  status: String
}

"""
a Money object
"""
scalar Money

type Mutation {
  """
  creates a new API key for the current user
  """
  createApiKey(
    """
    Parameters for CreateApiKey
    """
    input: CreateApiKeyInput!
  ): CreateApiKeyPayload
  createCustomSkill(
    """
    Parameters for CreateCustomSkill
    """
    input: CreateCustomSkillInput!
  ): CreateCustomSkillPayload
  createSignableDocument(
    """
    Parameters for CreateSignableDocument
    """
    input: CreateSignableDocumentInput!
  ): CreateSignableDocumentPayload @deprecated(reason: "experimental. Not working yet")

  """
  creates a new webhook to send events related to the current user's firm originating from Flexhire to an external service
  """
  createWebhook(
    """
    Parameters for CreateWebhook
    """
    input: CreateWebhookInput!
  ): CreateWebhookPayload

  """
  deletes an API key for the current user
  """
  deleteApiKey(
    """
    Parameters for DeleteApiKey
    """
    input: DeleteApiKeyInput!
  ): DeleteApiKeyPayload

  """
  rejects invitation or marks an expired contract as deleted
  """
  deleteContract(
    """
    Parameters for DeleteContract
    """
    input: DeleteContractInput!
  ): DeleteContractPayload

  """
  close an open job
  """
  deleteJob(
    """
    Parameters for DeleteJob
    """
    input: DeleteJobInput!
  ): DeleteJobPayload

  """
  deletes an account
  """
  deleteUser(
    """
    Parameters for DeleteUser
    """
    input: DeleteUserInput!
  ): DeleteUserPayload

  """
  deletes an existing webhook
  """
  deleteWebhook(
    """
    Parameters for DeleteWebhook
    """
    input: DeleteWebhookInput!
  ): DeleteWebhookPayload

  """
  terminate an active or paused contract
  """
  expireContract(
    """
    Parameters for ExpireContract
    """
    input: ExpireContractInput!
  ): ExpireContractPayload

  """
  make an offer to an existing flexhire user
  """
  makeOffer(
    """
    Parameters for MakeOffer
    """
    input: MakeOfferInput!
  ): MakeOfferPayload

  """
  pause an active contract
  """
  pauseContract(
    """
    Parameters for PauseContract
    """
    input: PauseContractInput!
  ): PauseContractPayload

  """
  rejects a freelancer on the hire pipeline, marking them as not suited to be hired for the job
  """
  rejectFreelancer(
    """
    Parameters for RejectFreelancer
    """
    input: RejectFreelancerInput!
  ): RejectFreelancerPayload
  removeSignableDocument(
    """
    Parameters for RemoveSignableDocument
    """
    input: RemoveSignableDocumentInput!
  ): RemoveSignableDocumentPayload @deprecated(reason: "experimental. Not working yet")

  """
  request an interview to an applicant
  """
  requestInterview(
    """
    Parameters for RequestInterview
    """
    input: RequestInterviewInput!
  ): RequestInterviewPayload

  """
  resends the invitation email for the given invitation contract
  """
  resendInvitationEmail(
    """
    Parameters for ResendInvitationEmail
    """
    input: ResendInvitationEmailInput!
  ): ResendInvitationEmailPayload

  """
  resumes a paused contract
  """
  resumeContract(
    """
    Parameters for ResumeContract
    """
    input: ResumeContractInput!
  ): ResumeContractPayload

  """
  adds feedback for the client's team on a potential hire
  """
  sendContractRating(
    """
    Parameters for SendContractRating
    """
    input: SendContractRatingInput!
  ): SendContractRatingPayload

  """
  send questions or a code test to a potential hire
  """
  sendContractRequests(
    """
    Parameters for SendContractRequests
    """
    input: SendContractRequestsInput!
  ): SendContractRequestsPayload

  """
  invite a user to flexhire as an individual contributor or manager on your team
  """
  sendInvitation(
    """
    Parameters for SendInvitation
    """
    input: SendInvitationInput!
  ): SendInvitationPayload

  """
  as a member, set up a payoneer account to get paid
  """
  setupPayoneer(
    """
    Parameters for SetupPayoneer
    """
    input: SetupPayoneerInput!
  ): SetupPayoneerPayload

  """
  as a member, set up a stripe connect account to get paid
  """
  setupStripeConnectedAccount(
    """
    Parameters for SetupStripeConnectedAccount
    """
    input: SetupStripeConnectedAccountInput!
  ): SetupStripeConnectedAccountPayload

  """
  skip a suggested candidate for a job, to replace his slot with another candidate
  """
  skipCandidate(
    """
    Parameters for SkipCandidate
    """
    input: SkipCandidateInput!
  ): SkipCandidatePayload

  """
  toggle bookmarked status for members on the hire pipeline
  """
  toggleBookmarkFreelancer(
    """
    Parameters for ToggleBookmarkFreelancer
    """
    input: ToggleBookmarkFreelancerInput!
  ): ToggleBookmarkFreelancerPayload

  """
  update a running contract
  """
  updateContract(
    """
    Parameters for UpdateContract
    """
    input: UpdateContractInput!
  ): UpdateContractPayload

  """
  update a firm
  """
  updateFirm(
    """
    Parameters for UpdateFirm
    """
    input: UpdateFirmInput!
  ): UpdateFirmPayload

  """
  update details of a job
  """
  updateJobDetails(
    """
    Parameters for UpdateJobDetails
    """
    input: UpdateJobDetailsInput!
  ): UpdateJobDetailsPayload

  """
  update screening configuration for a job
  """
  updateJobScreening(
    """
    Parameters for UpdateJobScreening
    """
    input: UpdateJobScreeningInput!
  ): UpdateJobScreeningPayload

  """
  update sourcing configuration for a job
  """
  updateJobSourcing(
    """
    Parameters for UpdateJobSourcing
    """
    input: UpdateJobSourcingInput!
  ): UpdateJobSourcingPayload

  """
  update a user
  """
  updateUser(
    """
    Parameters for UpdateUser
    """
    input: UpdateUserInput!
  ): UpdateUserPayload
  updateWebhook(
    """
    Parameters for UpdateWebhook
    """
    input: UpdateWebhookInput!
  ): UpdateWebhookPayload
}

"""
An object with an ID.
"""
interface Node {
  """
  ID of the object.
  """
  id: ID!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
}

"""
Autogenerated input type of PauseContract
"""
input PauseContractInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contractId: ID!
}

"""
Autogenerated return type of PauseContract
"""
type PauseContractPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contract: Contract
  errors: [Error!]
}

type PaymentMethod implements Node {
  id: ID!
  rawId: Int
}

type PayoutMethod implements Node {
  id: ID!
  isDefault: Boolean
  payoutMethodType: String!
  setupUrl: String
  status: String!
}

enum Position {
  """
  for freelance jobs, usually paid hourly
  """
  freelancer

  """
  for permanent jobs, usually paid with a fixed salary
  """
  permanent
}

type Profile implements Node {
  addressRecipient: String
  allowScreening: Boolean
  annualCompensation: Money
  availability: String
  availabilityType: [String!]
  availableAt: DateTime
  canWorkInTheUs: Boolean
  city: String
  cityRecipient: String
  clientRate: Money

  """
  ISO 3166-1 alpha-2 code, lowercase
  """
  country: String
  countryRecipient: String
  createdAt: DateTime
  freelancerRate: Money
  freelancerSubtypes: [FreelancerSubtype!]
  freelancerType: FreelancerType
  fullAddress: String
  id: ID!
  jobTypes: [JobType!]!
  jobsHaveCodeTests: Boolean
  lastMessagedAt: DateTime
  locationBounds0: Float
  locationBounds1: Float
  locationBounds2: Float
  locationBounds3: Float
  locationBounds4: Float
  locationLatitude: Float
  locationLongitude: Float
  managedTeamSize: Int
  openToOpportunities: Boolean
  region: String
  screeningFeedback: String
  screeningRequiresProject: Boolean
  slug: String
  stateRecipient: String
  status: String
  taxId: String
  textIntroduction: String
  totalExperience: Int
  updatedAt: DateTime
  urlBlog: String
  urlDribbble: String
  urlGithub: String
  urlLinkedin: String
  usCitizen: Boolean
  visibility: String
  zip: String
}

input ProfileAttributes {
  addressRecipient: String
  cityRecipient: String
  countryRecipient: String
  stateRecipient: String
  taxId: String
  usCitizen: Boolean
  visibility: String
  zip: String
}

type Project implements Node {
  custom: Boolean
  description: String
  id: ID!
  rawId: Int!
  screening: Boolean
  status: String
  submission: ProjectSubmission
  title: String
}

input ProjectAttributes {
  description: String
  rawId: Int
  title: String
}

type ProjectSubmission implements Node {
  description: String
  id: ID!
  project: Project
  rawId: Int!
  screenshotUrl: String
  status: String
  url: String
}

"""
Flexhire API - refer to https://flexhire.com/developer for more information
"""
type Query {
  """
  warning: experimental
  """
  chatMessages(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    unread: Boolean
  ): ChatMessageConnection!

  """
  warning: experimental
  """
  chatThreads(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ChatThreadConnection!

  """
  configuration values for the frontend. User specific
  """
  configuration: Configuration

  """
  load a contract: use either id, rawId, a combination of jobSlug and freelancerSlug, or freelancerEmail
  """
  contract(
    """
    can be used as an alternative to others to load invitations not yet accepted
    """
    freelancerEmail: String

    """
    to be used in combination with jobSlug
    """
    freelancerSlug: String

    """
    for loading the contracy by id
    """
    id: ID

    """
    to be used in combination with freelancerSlug
    """
    jobSlug: String

    """
    for loading the contracy by raw id
    """
    rawId: Int
  ): Contract

  """
  preview changes resulting from updating a contract for active/paused contracts
  and offer made contracts. Most useful for previewing rate changes
  """
  contractPreview(input: ContractPreviewAttributes!): ContractPreview

  """
  all contracts visible by the current user will be included
  """
  contracts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ContractConnection!

  """
  resolves to the currently logged in user
  """
  currentUser: User

  """
  load firm by slug
  """
  firm(slug: String): Firm

  """
  all firms visible by the current user will be included
  """
  firms(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): FirmConnection!

  """
  shows all freelancer subtypes (specializations) on the platform
  """
  freelancerSubtypes: [FreelancerSubtype!]

  """
  shows all freelancer types (industries) on the platform
  """
  freelancerTypes: [FreelancerType!]
  job(
    """
    load job by id
    """
    id: ID

    """
    load job by raw id
    """
    rawId: Int

    """
    load job by slug
    """
    slug: String
  ): Job

  """
  list of possible integrations for jobs on Flexhire
  """
  jobIntegrationProviders: [JobIntegrationProvider!]

  """
  all jobs visible by the current user will be included
  """
  jobs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    filter by firm using the firm's slug
    """
    firmSlug: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    filter by job status
    """
    status: String

    """
    filter by job owner
    """
    userId: ID
  ): JobConnection

  """
  list all members of the platform. Only used in backoffice tools
  """
  members(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: MembersFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection

  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node

  """
  Fetches a list of objects given a list of IDs.
  """
  nodes(
    """
    IDs of the objects.
    """
    ids: [ID!]!
  ): [Node]!

  """
  warning: experimental. Can be used to load a resource by slug. Could be a User, Firm or Job
  """
  resource(slug: String!, subslug: String, token: String): Resource

  """
  all selectable/usable skills on the platform
  """
  skills: [Skill!]

  """
  load user on the platform. Must be visible to the current user
  """
  user(
    """
    load user by id
    """
    id: ID

    """
    load user by raw id
    """
    rawId: Int

    """
    load member by profile slug
    """
    slug: String
  ): User
}

type Question implements Node {
  answersCount: Int
  description: String
  freelancerSubtypes: [FreelancerSubtype!]
  freelancerTypes: [FreelancerType!]
  id: ID!
  jobsCount: Int
  rawId: Int!
  skills: [Skill!]
  status: String
  tags: [Tag!]
  title: String
}

input QuestionAttributes {
  description: String
  rawId: Int
  status: String
  title: String!
}

type Reference implements Node {
  comments: String
  email: String
  id: ID!
  name: String
  otherRelation: String
  rawId: Int!
  relation: String
  status: String
}

"""
Autogenerated input type of RejectFreelancer
"""
input RejectFreelancerInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  clientRejectionComments: String
  clientRejectionMessage: String
  clientRejectionReason: String
  contractId: ID!
}

"""
Autogenerated return type of RejectFreelancer
"""
type RejectFreelancerPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contract: Contract
  errors: [Error!]
}

"""
Autogenerated input type of RemoveSignableDocument
"""
input RemoveSignableDocumentInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  signableDocumentId: ID!
}

"""
Autogenerated return type of RemoveSignableDocument
"""
type RemoveSignableDocumentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: User
  errors: [Error!]
  signableDocument: SignableDocument
}

"""
Autogenerated input type of RequestInterview
"""
input RequestInterviewInput {
  calendlyUrl: String
  clientAgreesTerms: Boolean!
  clientId: Int!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contractId: ID!
  interviewDate1: DateTime
  interviewDate2: DateTime
  interviewDate3: DateTime
  interviewNote: String
  interviewSchedulingMethod: String!
}

"""
Autogenerated return type of RequestInterview
"""
type RequestInterviewPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contract: Contract
  errors: [Error!]
}

"""
Autogenerated input type of ResendInvitationEmail
"""
input ResendInvitationEmailInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contractId: ID!
}

"""
Autogenerated return type of ResendInvitationEmail
"""
type ResendInvitationEmailPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contract: Contract
  errors: [Error!]
}

union Resource = Firm | Job | User

"""
Autogenerated input type of ResumeContract
"""
input ResumeContractInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contractId: ID!
}

"""
Autogenerated return type of ResumeContract
"""
type ResumeContractPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contract: Contract
  errors: [Error!]
}

"""
Autogenerated input type of SendContractRating
"""
input SendContractRatingInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contractId: ID!
  description: String!
  ratingPositive: Boolean!
  status: String!
}

"""
Autogenerated return type of SendContractRating
"""
type SendContractRatingPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contractFeedback: ContractFeedback
  errors: [Error!]
}

"""
Autogenerated input type of SendContractRequests
"""
input SendContractRequestsInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contractId: ID!
  messageTemplate: String
  projectDescription: String
  projectId: Int
  projectTitle: String
  questionsIds: [Int!]
  questionsTitles: [String!]
  videoIntroduction: Boolean
}

"""
Autogenerated return type of SendContractRequests
"""
type SendContractRequestsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contract: Contract
  errors: [Error!]
}

"""
Autogenerated input type of SendInvitation
"""
input SendInvitationInput {
  annualCompensation: Float
  clientId: ID

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  clientRate: Float
  currency: String
  endDate: Date
  firmRole: String
  freelancerEmail: String!
  freelancerFirstName: String!
  freelancerLastName: String!
  invitationMessage: String
  invoiceSchedule: String
  jobId: ID
  paymentMode: String
  rateMode: String
  startDate: Date!
}

"""
Autogenerated return type of SendInvitation
"""
type SendInvitationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contract: Contract
  errors: [Error!]
}

"""
Autogenerated input type of SetupPayoneer
"""
input SetupPayoneerInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of SetupPayoneer
"""
type SetupPayoneerPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: User
  errors: [Error!]
  message: String
  payoutMethod: PayoutMethod
}

"""
Autogenerated input type of SetupStripeConnectedAccount
"""
input SetupStripeConnectedAccountInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of SetupStripeConnectedAccount
"""
type SetupStripeConnectedAccountPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: User
  errors: [Error!]
  payoutMethod: PayoutMethod
}

type SignableDocument implements Node {
  contracts: [Contract!]
  id: ID!
  signatures: [Signature!]
  title: String!
  url: String!
  user: User
}

type Signature implements Node {
  id: ID!
  signableDocument: SignableDocument
  status: String!
  user: User
}

type Skill implements Node {
  """
  true if the skill is user created and not made fully public yet
  """
  custom: Boolean

  """
  if this skill was user created, this is the user that created it
  """
  customUser: User
  freelancerTypes: [FreelancerType!]
  id: ID!
  name: String
  rawId: Int
  slug: String
}

input SkillFilter {
  groupIndex: Int
  id: Int!
  name: String
  requiredYears: Int
}

"""
Autogenerated input type of SkipCandidate
"""
input SkipCandidateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  comments: String
  freelancerId: ID!
  jobId: ID!
  reason: String
  system: Boolean
}

"""
Autogenerated return type of SkipCandidate
"""
type SkipCandidatePayload {
  candidate: Candidate!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
}

type Subscription {
  """
  experimental, not working yet
  """
  chatMessageReceived: ChatMessageReceivedPayload!

  """
  experimental, not working yet
  """
  contractUpdated(contractId: ID!): ContractUpdatedPayload!
}

type Tag implements Node {
  id: ID!
  name: String
  rawId: Int!
}

"""
Autogenerated input type of ToggleBookmarkFreelancer
"""
input ToggleBookmarkFreelancerInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contractId: ID!
}

"""
Autogenerated return type of ToggleBookmarkFreelancer
"""
type ToggleBookmarkFreelancerPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contract: Contract
  errors: [Error!]
}

"""
Autogenerated input type of UpdateContract
"""
input UpdateContractInput {
  clientId: ID

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  clientRate: Float
  contractId: ID!
  currency: String
  enableTimesheets: Boolean
  endDate: Date
  firmRole: String
  hidden: Boolean
  inheritorId: ID
  paymentMode: String
  purchaseOrderNumber: String
  rateMode: String
  requireTimesheetApprovalForPayments: Boolean
  startDate: Date
  status: String
  tags: [String!]
}

"""
Autogenerated return type of UpdateContract
"""
type UpdateContractPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contract: Contract
  errors: [Error!]
}

"""
Autogenerated input type of UpdateFirm
"""
input UpdateFirmInput {
  additionalInvoiceText: String
  allowInvoiceAutoCharge: Boolean
  backgroundTheme: String
  billingPlanId: ID

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currency: String
  description: String

  """
  omit this to update the current user's firm
  """
  firmId: ID
  greenhouseApiKey: String
  invoiceSchedule: String
  logoUrl: String
  managerForNonPayrollFees: ID
  name: String
  paymentMethodId: ID
  purchaseOrderNumberForNonPayrollFees: String
  website: String
}

"""
Autogenerated return type of UpdateFirm
"""
type UpdateFirmPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  firm: User
}

"""
Autogenerated input type of UpdateJobDetails
"""
input UpdateJobDetailsInput {
  autoRenew: Boolean
  availabilityType: String
  city: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  clientRate: Money
  clientRateCents: Int
  country: String
  defaultDistance: Float
  description: String
  descriptionExperience: String
  descriptionResponsibilities: String
  freelancerSubtypes: [FreelancerSubtypeAttributes!]
  freelancerType: FreelancerTypeAttributes
  fullAddress: String
  jobCountries: [String!]
  jobSkills: [JobSkillAttributes!]
  jobTimezone: String
  locationLatitude: Float
  locationLongitude: Float
  locationType: String
  minClientRate: Money
  minClientRateCents: Int
  numberOfHires: Int
  positionTypes: [String!]
  projectLengthInMonths: Int
  rateMode: String
  referralBounty: Money
  referralBountyCents: Int
  region: String
  requiredExperienceYears: Int
  slug: String
  status: String
  timezoneRange: Int
  timezoneValue: Int
  title: String
  userId: Int
}

"""
Autogenerated return type of UpdateJobDetails
"""
type UpdateJobDetailsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  job: Job
}

"""
Autogenerated input type of UpdateJobScreening
"""
input UpdateJobScreeningInput {
  allowTextualAnswers: Boolean
  autoSendScreeningRequests: Boolean

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  project: ProjectAttributes
  questions: [QuestionAttributes!]
  screeningRequestMessageTemplate: String
  slug: String!
}

"""
Autogenerated return type of UpdateJobScreening
"""
type UpdateJobScreeningPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  job: Job
}

"""
Autogenerated input type of UpdateJobSourcing
"""
input UpdateJobSourcingInput {
  activeJobIntegrationsNames: [String!]
  automaticallyNotifyCandidates: Boolean
  candidatesToNotify: [CandidateToNotifyAttributes!]

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  hiringManagerId: Int
  jobSocialIntegrations: [String!]
  referralBounty: Int
  slug: String!
  userId: Int
}

"""
Autogenerated return type of UpdateJobSourcing
"""
type UpdateJobSourcingPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  job: Job
}

"""
Autogenerated input type of UpdateUser
"""
input UpdateUserInput {
  accept: Boolean
  avatarUrl: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentPassword: String
  defaultPayoutMethodId: ID
  email: String
  firstName: String
  hidden: Boolean
  lastName: String
  password: String
  phone: String
  profile: ProfileAttributes
  reject: Boolean
  sendTimesheetReminders: Boolean
  status: String
  teamInvitationMessage: String

  """
  omit this to update the current user
  """
  userId: ID
}

"""
Autogenerated return type of UpdateUser
"""
type UpdateUserPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  user: User
}

"""
Autogenerated input type of UpdateWebhook
"""
input UpdateWebhookInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  if false, events will not be sent to this Webhook
  """
  enabled: Boolean
  id: ID!

  """
  HTTP POST requests with JSON bodies will be sent to this URL. The fields on
  the body are 'event_name', 'timestamp' (unix integer format) and 'records'
  (array of string IDs of related records)
  """
  url: String
}

"""
Autogenerated return type of UpdateWebhook
"""
type UpdateWebhookPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]

  """
  the webhook just edited
  """
  webhook: Webhook
}

type User implements Node {
  """
  extra text that will be added on invoices to this user
  """
  additionalInvoiceText: String

  """
  video answers
  """
  answers(jobId: Int): [Video!]

  """
  will be true if this user can manage and use API keys
  """
  apiAccess: Boolean
  apiKeys: [ApiKey!]
  appliedAt: DateTime
  avatarUrl: String
  backgroundCheckCompleted: Boolean
  blockPlatformAccessDueToUnpaidInvoicesDate: Boolean
  calendlyUrl: String
  canMakeOffer: Boolean
  canNotify: Boolean
  canRequestInterview: Boolean
  canSetupPayoutMethod: Boolean

  """
  all the contracts in which this user is involved as client
  """
  clientContracts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    stage: String
  ): ContractConnection

  """
  frontend configuration values for this user
  """
  configuration: Configuration
  confirmedEmail: Boolean
  contractSigned: Boolean

  """
  all the contracts in which this user is involved as client/manager or individual
  """
  contracts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ContractConnection
  createdAt: DateTime
  directChatThreadId: Int
  displayDialogAfterSavingDraftTimesheet: Boolean
  email: String

  """
  true if this member has completed the feature step on their profile
  """
  featureStepCompleted: Boolean!

  """
  true if this member is featured on the Flexhire homepage
  """
  featured: Boolean

  """
  for clients only. Associated company
  """
  firm: Firm
  firmRole: FirmRole
  firstName: String

  """
  all the contracts in which this user is involved as invidivual
  """
  freelancerContracts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ContractConnection
  fullAddress: String
  hasActivePayoutMethod: Boolean

  """
  true if this user has been invited to the platform with an offer
  """
  hasInvitationContracts: Boolean

  """
  true if this user can view and manage invoices for his firm
  """
  hasInvoiceAccess: Boolean

  """
  true if this client has any hired or invited members
  """
  hasTeam: Boolean
  hidden: Boolean
  hireSourcedByClientMargin: Float @deprecated(reason: "use firm.billingPlan values")
  hireSourcedByFlexhireMargin: Float @deprecated(reason: "use firm.billingPlan values")
  id: ID!

  """
  name of the integration this user has been imported from, if any
  """
  integrationName: String
  inviteMargin: Float @deprecated(reason: "use firm.billingPlan values")

  """
  true if this user has been invited to apply to the given job
  """
  invitedToJob(jobId: Int, jobSlug: String): Boolean

  """
  user managing invoices for this user. Null if manages own invoices
  """
  invoiceManager: User
  isFlexhireTeam: Boolean
  jobApplicationsCount: Int

  """
  used in hire pipeline for candidates and potential applicants: contains any reasons for blocking application to job
  """
  jobIncompatibilityReasons(jobId: Int, jobSlug: String): [String!]
  lastName: String
  lastSeenAt: DateTime
  location: String @deprecated(reason: "use country, fullAddress, city, region instead")

  """
  contract with this user's superior in the company. Only for clients
  """
  managerContract: Contract

  """
  saved message to send when inviting managers
  """
  managerInvitationMessage: String

  """
  raw IDs of users whose invoices are being managed by this user
  """
  managesInvoicesFor: [Int!]
  minMarginUsd: Float @deprecated(reason: "use country, fullAddress, city, region instead")

  """
  combination of firstName and lastName
  """
  name: String
  passwordSetupRequired: Boolean

  """
  default payout method
  """
  payoutMethod: PayoutMethod
  payoutMethods: [PayoutMethod!]
  phone: String

  """
  for members only. Associated profile data
  """
  profile: Profile

  """
  will be added to all invoices to this user
  """
  purchaseOrderNumber: String
  ratingCountHigh: Int
  ratingCountLow: Int
  ratingCountMedium: Int
  rawId: Int

  """
  will reference the 'real user' when using the masking feature to mask into another account
  """
  realUser: User
  references: [Reference!]
  remoteDebugCode: String

  """
  CV/Resume URL
  """
  resumeUrl: String

  """
  list of roles the user has. These will affect API permissions and visibility and the frontend UI
  """
  roles: [UserRole!]!

  """
  will be true if this is the same user that is querying the API
  """
  self: Boolean
  sendTimesheetReminders: Boolean

  """
  true if it's a skipped candidate
  """
  skipped: Boolean

  """
  only relevant for members
  """
  status: String

  """
  saved message to send when inviting members
  """
  teamInvitationMessage: String
  termsOfServiceApproved: Boolean
  timezone: String
  timezoneName: String
  timezoneOffset: Int

  """
  contains the new email address when changing address and not having the new one confirmed yet
  """
  unconfirmedEmail: String
  updatedAt: DateTime
  userSkills: [UserSkill!]

  """
  true if this member is pre-screened
  """
  verified: Boolean

  """
  video introduction
  """
  video: Video
  webhooks: [Webhook!]
}

"""
The connection type for User.
"""
type UserConnection {
  """
  A list of edges.
  """
  edges: [UserEdge]

  """
  A list of nodes.
  """
  nodes: [User]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int
}

"""
An edge in a connection.
"""
type UserEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: User
}

enum UserRole {
  """
  Flexhire admin, has the highest level of permissions possible
  """
  admin

  """
  Flexhire customer
  """
  client

  """
  Not in use at the moment
  """
  customer_success_rep

  """
  Also called 'freelancer' due to legacy reasons
  """
  member

  """
  Can be assigned to customers and manage their hiring pipeline
  """
  recruiter

  """
  Flexhire sales account. Can manage firms
  """
  sales

  """
  Flexhire screening account. Can review member applications for pre-screening
  """
  screening
}

type UserSkill implements Node {
  experience: Int
  id: ID!
  skill: Skill
}

type Video implements Node {
  available: Boolean!
  createdAt: DateTime!

  """
  for company videos
  """
  firm: Firm
  id: ID!

  """
  preview image for the video
  """
  posterUrl: String!

  """
  for video answers
  """
  question: Question
  status: String!
  url: String!

  """
  video owner
  """
  user: User
  videoType: String!
}

type Webhook implements Node {
  enabled: Boolean!
  id: ID!
  url: String!
  webhookDeliveries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): WebhookDeliveryConnection
}

type WebhookDelivery implements Node {
  createdAt: DateTime!
  eventName: String!
  id: ID!
  status: String!
  webhook: Webhook
}

"""
The connection type for WebhookDelivery.
"""
type WebhookDeliveryConnection {
  """
  A list of edges.
  """
  edges: [WebhookDeliveryEdge]

  """
  A list of nodes.
  """
  nodes: [WebhookDelivery]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int
}

"""
An edge in a connection.
"""
type WebhookDeliveryEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: WebhookDelivery
}
